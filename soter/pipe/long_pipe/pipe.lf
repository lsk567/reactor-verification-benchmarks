/**
 *  Original Description:
 *
 *     A simple sequence of N processes arranged in a linear pipe:
 *     every process knows only the next in the row and forwards everything to it.
 *
 *     A property Soter can prove is that the mailbox of each `pipe_node`
 *     contains at most 1 message at any given time.
 *
 *     Adapted from [(Kobayashi, Nakade and Yonezawa, 1995)](http://dx.doi.org/10.1007/3-540-60360-3_42)
 */
 target C {
    verification: {
        engine: uclid,
        tactic: induction,
        steps: 2
    },
    no-compile: true
};

reactor Source {

    output out:int;
    logical action _timer(1 sec):int;

    @inv(set(out, 1))
    @inv(schedule(_timer, 0))
    reaction(startup, _timer) -> out, _timer {=
        SET(out, 1);
        schedule(_timer, 0);
    =}
}

reactor Sink {
    input in:int;
    reaction(in) {=
        printf("Received after pipeline: %d\n", in->value);
    =}
}

reactor Node {
    
    input  in:int;
    output out:int;
    
    state  count:int;
    state  payload:int;

    logical action send_output:int;

    @inv(payload == in)
    @inv(count == (prev(count) + 1))
    @inv(schedule(send_output, 0)) // Dummy payload
    reaction(in) -> send_output {=
        self->payload = in->value;
        self->count++;
        schedule(send_output, 0);
    =}

    @inv(set(out, 1)) // FIXME: reference payload
    @inv(count == (prev(count) - 1))
    reaction(send_output) -> out {=
        SET(out, self->payload);
        self->count--;
    =}
}

// @property("sink_receives_in_time", 
//     source.reaction[1] ==> 
//         [!sink.reaction[1]] W[6 sec] [sink.reaction[1]])
// @bound("sink_receives_in_time", 5)
// //// Main property
@property("at_most_one_message", 
    [node_1.count <= 1
    /\ node_2.count <= 1
    /\ node_3.count <= 1
    /\ node_4.count <= 1
    /\ node_5.count <= 1]
)
@bound("at_most_one_message", 1)
main reactor {
    
    source = new Source();
    sink = new Sink();
    node_1 = new Node();
    node_2 = new Node();
    node_3 = new Node();
    node_4 = new Node();
    node_5 = new Node();

    source.out -> node_1.in after 1 sec;
    node_1.out -> node_2.in after 1 sec;
    node_2.out -> node_3.in after 1 sec;
    node_3.out -> node_4.in after 1 sec;
    node_4.out -> node_5.in after 1 sec;
    node_5.out -> sink.in after 1 sec;
}