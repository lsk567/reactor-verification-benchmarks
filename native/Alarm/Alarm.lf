target C {
    verification: {
        engine: uclid,
        induction: 2
    }
};

reactor ReactorWithAlarm {
    
    input in:int;
    output out:int;
    state err:int;

    logical action setAlarm(2 sec):int;

    //@label Computation
    // @inv([[err == 1] ==> schedule(setAlarm, 0)] 
    //         /\ [[err == 0] ==> set(out, 1)])
    @inv(schedule(setAlarm, 0))
    reaction(in) -> out, setAlarm {=
        // If certain abnormal state occurs,
        // trigger the alarm.
        if (true) {
            schedule(setAlarm, 0);
            return;
        }
        // Otherwise, perform computation and
        // output the value normally.
        SET(out, 1);
    =}

    //@label If fault occurs, trigger the alarm at 2 secs.
    reaction(setAlarm) {=
        // Trigger the alarm
    =}
}

// @property("alarm_works",
//     [r.reaction[1] /\ [r.err == 1]] 
//         ==> F[r.reaction[2] /\ within(1 sec)])
// @property("alarm_works", false)
@property("alarm_works",
    r.reaction[1] 
        ==> F[r.reaction[2] /\ within(1 sec)])
@bound("alarm_works", 2)
main reactor {
    r =  new ReactorWithAlarm();
}